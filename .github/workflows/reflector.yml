name: reflector

on:
  workflow_call:
    inputs:
      targetUrl:
        description: 'The event target URL.'
        required: true
        type: string
      runner-labels:
        description: 'The runner label(s) to use.'
        required: false
        default: '[ self-hosted ]'
        type: string

env:
  GAR_TARGET_URL: ${{ inputs.targetUrl }}

jobs:
  reflect:
    runs-on: ${{ inputs.runner-labels }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm install request
      - uses: actions/github-script@v6
        id: reflector-run
        with:
          result-encoding: string
          script: |
            let targetUrl = '${{ env.GAR_TARGET_URL }}';

            async function reflector({github, context, targetUrl}) {
              // Validate that targetUrl is a valid URL
              const URL = require('url').URL;

              function validateUrl(urlString) {
                try {
                  new URL(urlString); // eslint-disable-line no-new
                  return true;
                } catch (err) {
                  throw new Error(`Invalid URL: ${urlString} \n ${err}`);
                }
              }

              validateUrl(targetUrl);

              const request = require('request');

              let options = {
                url: targetUrl,
                method: 'POST',
                headers: {
                  'X-GitHub-Event': context.eventName,
                  'Content-Type': 'application/json',
                  'Content-Length': context.payload.length,
                },
                body: JSON.stringify(context.payload),
              };

              // Send the request
              return new Promise((resolve, reject) => {
                console.log(`Sending payload to ${targetUrl} with options: ${JSON.stringify(options.headers)}`);

                request(options, (error, response, body) => {
                  if (error) {
                    reject(error);
                  } else if (response.statusCode < 200 || response.statusCode >= 300) {
                    reject(new Error(`Error sending payload to ${targetUrl}: ${response.statusCode} - ${response.statusMessage}`));
                  } else {
                    resolve(`Payload sent to ${targetUrl} \n response: ${response.statusCode} - ${response.statusMessage}`);
                  }
                });
              });
            };

            const result = await reflector({github, context, targetUrl});
            console.log(result);
            return result;
      - name: output-summary
        if: always()
        run: echo "${{ steps.reflector-run.outputs.result }}" >> $GITHUB_STEP_SUMMARY
